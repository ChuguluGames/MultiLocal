/*
on a donc besoin du javascript de creer un host
on lance le browser dhost
on retourne a chaque nouvel host ou depart dhost la liste actualisee


javascript
=> call create host
=> callback on create
=> callback on update
natif
=> create host
=> callback on create
=> get hosts
=> callback on update

on lance le browser
on cherche un host
pas de host, on cree un host
on attend

un host, on se connecte a lhost

a chaque nouvel host, on update la liste
a chaque nouveau device connecte on met a jour le nombre

on doit creer un service sur demande
soit on cree un service pour creer un host
soit pour se connecter a un host
on va utiliser la technique des noms

lorsqu'on clique sur "create host", on cree un service "host_123";
lorsqu'on clique sur un host, on cree un service "client_123";
et voila

donc quand on liste les host, on doit chequer le nom

on doit echanger des donnees entre le serveur et les clients
sachant qu'en fait tout le monde est un client 
sauf que un est aussi le server

donc on cree un host, on s'auto connecte au serveru
ensuite, on peut verifier simplement en envoyant "nom du client + random" au serveur et on va juste nslog depuis le serveur avec un callback js

on doit donc attriver un id au client pour chaque


le server envoie des donnees a tous les connectes
le client recoit du server et n'envoie qu'au serveur

on a donc un event
onMessage pour le client (message du server recu)
onMessage pour le serveru (message recu d'un client)

par exemple, on doit envoyer les coordonnees
on envoie donc au serveur et le serveur envoie a tout le monde sauf le client/master
le master recoit un evenement pour chaque coordonnee de chaqun
mais il faut que le serveur redispatch pour chaque client


*/


Project:
  - connect two device through wifi
  - listing local devices
  - creating a bridge
  - echange data in real time between two devices

Research:

   - Websocket:
    Connect devices to a server and send/receive data through it in real time.

    GapSocket:
    https://github.com/purplecabbage/phonegap-plugins/tree/master/iPhone/GapSocket
    => apparently same as websocket except that the server connection is handle by native operations.

  => need internet
  => can work on every plateforms

  - GameKit
    http://developer.apple.com/library/ios/#documentation/NetworkingInternet/Conceptual/GameKit_Guide/Introduction/Introduction.html
    Peer-to-Peer Connectivity Provides Local Wireless and Bluetooth Networking.
    Peer-to-peer connectivity is provided in iOS 3.0 and later.

    Samples: 
      - http://arctouch.com/beamit/
      - http://blog.objectgraph.com/index.php/2009/07/01/iphone-sdk-30-playing-with-game-kit-part-1/

    Game Center
      http://developer.apple.com/library/ios/#documentation/NetworkingInternet/Conceptual/GameKit_Guide/GameCenterOverview/GameCenterOverview.html
      Authentification
      Friens
      Leaderboards
      Achievements
      Auto-match
      Voice
    
      => need internet

    => can work with Bluetooth and local wireless
    => can work with Android ? apparently gamekit requires iOS devices or MFi complaint devices
        => MFi: its a program from apple where you have to licence technology to develop accessories that can connect to Apple devices. More info here - developer.apple.com/programs/mfi

  - NSNetServices
    The NSNetService class represents a network service that your application publishes or uses as a client.
    
    NSNetServiceBrowser
      http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSNetServiceBrowser_Class/Reference/Reference.html
        
      The NSNetServiceBrowser class defines an interface for finding published services on a network using multicast DNS.

      For ensuring that you'll use wifi instead of bluetooth, you need to desactivate bluetooth.

      Samples:
        http://www.devx.com/wireless/Article/44126/1954
        http://cocoaheads.byu.edu/wiki/publishing-nsnetservice-bonjour-networking
    
   => can work with Bluetooth and local wireless 
   => don't know about Android-iOs interaction through NSNetServices, but Android handle Bonjour services

  - Android JmDNS
    

Look into: 
  - GameKit - Peer-to-Peer Connectivity
  - Websocket + NSNetServices
    to look for available services: NSNetServiceBrowser + Websocket + NSNetServices
    
    if possible test performance with GapSocket + NSNetServices